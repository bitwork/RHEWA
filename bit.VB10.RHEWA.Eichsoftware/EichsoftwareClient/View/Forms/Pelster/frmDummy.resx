<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RadLabel1.Text" xml:space="preserve">
    <value>&lt;html&gt;&lt;p&gt;&lt;span style="font-size: 13px; font-family: consolas"&gt;&lt;span style="font-size: 13px; font-family: consolas"&gt;&lt;strong&gt;Przeprowadzenie procedury stopniowej:&lt;br /&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-size: 13px; font-family: consolas"&gt;&lt;span style="font-size: 13px; font-family: consolas"&gt;Całkowita procedura stopniowa składa się z badania poprawności oraz ograniczonego badania histerezy (ponieważ histereza jest tylko badana w zakresie pojedynczych stopni a nie na całej krzywej błędu, obowiązują ograniczone granice błędów legalizacyjnych). &lt;p&gt;&lt;/p&gt;&lt;p&gt;Przy badaniu z wzrastającym obciążeniem stawia się dostępne &lt;span style="color: #0000ff"&gt;obciążenie wzorcowe L&lt;/span&gt; na nieobciążoną, stabilną wagę i określa odchyłkę pomiaru 1. stopnia procedury &lt;span style="color: #0000ff"&gt;Ew1&lt;/span&gt;. Po zdjęciu obciążenia wzorcowego określa się różnicę &lt;span style="color: #0000ff"&gt;&lt;span style="font-family: symbol"&gt;D&lt;/span&gt;P1&lt;/span&gt; wartości wskazanych bez obciążenia wzorcowego, które jest miarą dla histerezy w zakresie 1. stopnia procedury. &lt;/p&gt;&lt;p&gt;Dla 2. stopnia procedury nakłada się odpowiedni ciężar zastępczy. Ten ciężar zastępczy musi odpowiadać tylko w przybliżeniu obciążeniu wzorcowemu (tolerancja ± 10e), ponieważ przyjmuje się, że krzywa błędu nie zmienia się znacznie w tym zakresie. Teraz dokłada się obciążenie wzorcowe, określa odchyłkę pomiaru &lt;span style="color: #008000"&gt;Ew2&lt;/span&gt; i po zdjęciu obciążenia wzorcowego różnicę &lt;span style="color: #008000"&gt;&lt;span style="font-family: symbol"&gt;D&lt;/span&gt;P2&lt;/span&gt; dla 2. stopnia procedury. Tą procedurę powtarza się, aż &lt;/p&gt;&lt;/span&gt;&lt;p&gt;&lt;/p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 13px; font-family: consolas"&gt;&lt;span style="font-size: 13px; font-family: consolas"&gt;&lt;span style="font-size: 13px; font-family: consolas; color: #000000"&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-size: 13px; font-family: consolas"&gt;&lt;span style="font-size: 13px; font-family: consolas"&gt; osiągnięcia najwyższego obciążenia, przy czym nie jest wymagane, aby wszystkie stopnie procedury były o tej samej wielkości. Odchyłka pomiarowa EW wagi dla określonego punktu obciążenia wynika z sumy od wcześniej aż &lt;/span&gt;&lt;/span&gt;&lt;span style="font-size: 13px; font-family: consolas"&gt;&lt;span style="font-size: 13px; font-family: consolas"&gt;&lt;span style="font-size: 13px; font-family: consolas; color: #000000"&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-size: 13px; font-family: consolas"&gt;&lt;span style="font-size: 13px; font-family: consolas"&gt; tego punktu obciążenia obciążeniem wzorcowym stwierdzonych odchyłek pomiarowych (&lt;span style="font-family: symbol"&gt;S&lt;/span&gt;Ewi). &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Leży przy jednym stopniu procedury wartość absolutna różnicy wartości wskazanych [&lt;span style="font-family: symbol"&gt;D&lt;/span&gt;Pi] większa/równa 0,5 e, waga zostanie odrzucona. &lt;br /&gt;Znajduje się [&lt;span style="font-family: symbol"&gt;D&lt;/span&gt;Pi] między 0,2 e a 0,5 e należy powtórzyć owy stopień procedury. Jeżeli jest przy powtórce [&lt;span style="font-family: symbol"&gt;D&lt;/span&gt;Pi] &amp;gt; 0,2 e, waga zostanie również odrzucona.&lt;br /&gt;Całkowita procedura stopniowa może być przeprowadzona z maksymalnie pięcioma stopniami. Nie jest wymagane, aby wszystkie stopnie procedury były o tej samej wielkości. Zwłaszcza ostatni stopień procedury może być mniejszy niż poprzednie. &lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/html&gt;</value>
  </data>
</root>